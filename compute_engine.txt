//become root user
sudo su

//update all packages
apt update 

//install apache package using apt
apt install apache2

//list files
ls /var/www/html

//print to console
echo "Hello World!"

//send hello world to that file
echo "Hello World!" > /var/www/html/index.html

//print hostname
echo $(hostname)

//print vm ip
echo $(hostname -i)

//print to console
echo "Hello World from $(hostname)"
echo "Hello World from $(hostname) $(hostname -i)"

//send to that file
echo "Hello world from $(hostname) $(hostname -i)" > /var/www/html/index.html

sudo service apache2 start

//SImplify VM HTTP Server
#!/bin/bash
apt update 
apt -y install apache2
echo "Hello world from $(hostname) $(hostname -I)" > /var/www/html/index.html

//Bootstraping
The process of installing and configuring a server with any software, or installing OS patches when the VM instance is launched is called bootstrapping.

//Hardening an image
The process of securing an image by removing unnecessary software, locking down the OS, and installing security patches is called hardening.

//There are two types of discount in GCP vm instances
1. Sustained use discount
2. Committed use discount

//SPot VMs
Spot VMs are preemptible VMs that can be terminated at any time. They are ideal for workloads that can be interrupted, such as batch jobs, data processing, and rendering.

//Sole tenant nodes
Sole tenant nodes are VMs that run on hardware that is dedicated to a single customer. They are ideal for workloads that require high levels of isolation, such as financial services, healthcare, and government.

//instance groups
Instance groups are a collection of VMs that are managed as a single entity. They are ideal for workloads that require high availability, such as web servers and batch jobs.
- Managed instance groups
    * Features: Auto scaling, auto healing, rolling updates, and load balancing
- Unmanaged instance groups
    * Features: None
    * Not recommended unless you need different kinds of VMs

//Managed instance groups
Managed instance groups are a collection of VMs that are managed as a single entity. They are ideal for workloads that require high availability, such as web servers and batch jobs.
- Maintains a specified number of VMs
- Detect application failures and restarts VMs
- Provides auto scaling
- Add load balancing to a managed instance group
- Create instances in multiple zones
- Release new versions of your application with zero downtime

//GCP Cloud Load Balancing
GCP Cloud Load Balancing is a global load balancing service that distributes incoming traffic across multiple VMs. It is ideal for workloads that require high availability,
such as web servers and batch jobs.
Managed service
- Load balancing across multiple zones
- Load balancing across multiple regions
- GC ensures that the load balancer is highly available
- Auto scales to handle huge loads
- Load balancers can be public or private
Types:
- HTTP(S) Load Balancing
- TCP Proxy Load Balancing
- SSL Proxy Load Balancing
- Network Load Balancing
- Internal TCP/UDP Load Balancing

//Managed Services
Managed services are services that are managed by Google.

//IAAS Infrastructure as a Service
IAAS is a service that provides virtual machines, storage, and networking resources.
Use only Infrastructure from cloud provider
You are responsible for:
- OS
- Middleware
- Application
- Data
- Load Balancing

//PAAS Platform as a Service
PAAS is a service that provides virtual machines, storage, networking resources, and a platform to run your application.
Use a Platform from cloud provider
You are responsible for:
- configuring the platform
- Application code
Cloud provider is responsible for:
- OS
- Application runtime
- Autoscaling, availability, and load balancing
Varieties:
- CAAS Container as a Service
- FAAS Function as a Service
- Databases as a Service
- App Engine
- Cloud Functions
- Cloud Run

//Containers
Containers are a lightweight way to package and run your applications.
- Containers are isolated from each other and bundle their own software, libraries, and configuration files
- They share the OS kernel with other containers, running as isolated processes in user space on the host operating system
- They are portable across clouds and OS distributions
- They are lightweight and fast to start
- They can be used for both stateless and stateful applications
- They are ideal for microservices and serverless applications

//Container Orchestrations
Container orchestrations are tools that automate the deployment, scaling, and management of containers.
- Kubernetes
- Docker Swarm
- Apache Mesos
- Apache Aurora
- Nomad
- EKS (Elastic Kubernetes Service)
- ECS (Elastic Container Service)
- GKE (Google Kubernetes Engine)
- Cloud Run
Features:
- Scheduling
- Service discovery - helps containers find each other
- Load balancing
- Scaling
- Rolling updates
- Health checking
- Self-healing
- Secrets management
- Resource management
- Logging and monitoring
- Zero downtime deployments

//Serverless
Serverless is a cloud computing execution model in which the cloud provider dynamically manages the allocation and provisioning of servers.
- You don't have to provision or manage servers
- You don't have to install or manage software
- You don't have to pay for idle resources
- You don't have to worry about scaling
- You don't have to worry about high availability
Remember serverless does not mean there are no servers. It means that the cloud provider manages the servers for you.
- Pay for use, requests, or duration
Examples:
- Cloud Run
- AWS Lambda
- Azure Functions
- Google Cloud Functions

//SAAS Software as a Service
SAAS is a service that provides a complete application that runs in the cloud.
Use a complete application from cloud provider
You are responsible for:
- Configuring the software
Cloud provider is responsible for:
- OS
- Application runtime
- Middleware
- Application
- Autoscaling, availability, and load balancing
Varieties:
- CRM
- ERP
- HR
- Accounting
Examples:
- Salesforce
- Workday
- SAP
- Gmail

//Shared Responsibility Model
The shared responsibility model is a framework that defines the responsibilities of the cloud provider and the customer for security in the cloud.
GCP provides Features to make security easier:
- Encryption
- Identity and access management
- Network security
- KMS

Customer responsibilities vary with the model:
- IAAS
    * PAAS
    * OS
    * Middleware
    * Application
    * Data
    * Load Balancing
- PAAS
    * SAAS
    * Configuring the platform
    * Application code
- SAAS
    * Configuring the software
    * Content + access policies + usage

Google Cloud is alwaus responsible for:
- Physical security
- Network security
- Audit logging etc

//GCP Managed Services for Compute
GCP Managed Services for Compute are services that are managed by Google.
- Compute Engine: IAAS
- Google Kubernetes Engine: CAAS, Orchestrate containerized microservices on Kubernetes
- App Engine: PAAS (Caas, Serverless), Build and run scalable web applications in a fully managed environment
- Cloud Functions: Faas, Serverless, Run code in response to events without managing servers
- Cloud Run: Caas, Serverless, Run and deploy highly scalable containerized applications on a fully managed environment. Does not need a cluster